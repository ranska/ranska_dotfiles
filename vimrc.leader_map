"map h gT
"map l gt
"
map ♥ <ESC>:w<Return>
imap ♥ <ESC>:w<Return>
map ç <ESC>:w<Return>
imap ç <ESC>:w<Return>
"
map ♢ <ESC>:q<Return>
imap ♢ <ESC>:q<Return>
cmap é <C-t>
map œ <C-p>
map ù ⦿
nmap ù cw
imap ù <C-p>

imap ♋ <ESC>:q<Return>
map ♋ :q<Return>
map <C-n> :NERDTreeToggle<CR>
imap <C-n> <ESC>:NERDTreeToggle<CR>
map ✔ :NERDTreeToggle<CR>
imap ✔ <ESC>:NERDTreeToggle<CR>
map <leader>✔v :BookmarkToRoot views<CR>
map <leader>✔stc :BookmarkToRoot stuco<CR>
map <leader>✔shc :BookmarkToRoot schco<CR>
map <leader>✔s :BookmarkToRoot services<CR>
map <leader>✔q :BookmarkToRoot query<CR>
map ☆ <C-p>
map <Leader>a <C-p>
imap ☆ <C-t>
cmap ☆ <C-(>
map! ☆ <C-t>
map ♧ <<
map ♡ >>
imap ♧ <ESC><<i
imap ♡ <ESC>>>i
map ♤ c$
imap ♤ <ESC>c$
map é $
"imap é -><Return>
map ♞ <C-w>t<C-w>K
map ♘ <C-w>t<C-w>H
"imap éé <ESC>Vaf
"imap éé <ESC>Vaf
map ♋  :tabnew<CR>
"map ♈  <C-w><C-w>
map è :tabnew<CR>:NERDTreeToggle<CR>
map <Leader>è :vs<CR>:NERDTreeToggle<CR>
" control p
map <Leader>é :tabnew<CR><C-p>
map <Leader>s :vs<CR><C-p>
map <Leader>n <C-w>w
" align = and hash
map <Leader>ll :Tabularize /=<CR>
map <Leader>lp :Tabularize/\w:\zs/<CR>
map <Leader>1 1gt
map <Leader>2 2gt
map <Leader>3 3gt
map <Leader>4 4gt
map <Leader>5 5gt
map <Leader>6 6gt
map <Leader>7 7gt
map <Leader>8 8gt
map <Leader>9 9gt
" Rang tool
"map <Leader>t :%s/$scope/\$scope/g<CR>
map <Leader>t "t
" paste
map <Leader>dl :set paste!<CR>
"Upercase word
"imap àà <esc>bveUw
noremap à V
map <leader>aa <Plug>BlockToggle

map <Leader>cp ci)
"
" RANG path
"
"
"cmap ⦿g source/assets/javascripts/ng/
"cmap ⦿c source/assets/javascripts/ng/controllers/
"cmap ⦿s source/assets/javascripts/ng/services/
"cmap ⦿t source/templates
"cmap ⦿p source/partials

cmap ⦿g app/assets/
cmap ⦿c app/controllers/
cmap ⦿s app/services/
cmap ⦿v app/views/
cmap ⦿p spec/

"vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

nnoremap <leader>vlm :vsplit ~/.vimrc.leader_map<cr>
nnoremap <leader>vb :vsplit ~/.vimrc.bundles<cr>
nnoremap <leader>vtm :vsplit ~/.vimrc.tabmode<cr>
nnoremap <leader>sm :vsplit ~/.vim/bundle/vim-snippets/snippets<cr>

" no nnoremap because of surround plugin
map <leader>sl yyP$ysiw'j$

" source plugin under dev
nnoremap <leader>p⦿ :source %<cr>


"let g:UltiSnipsExpandTrigger = '☺'
"let g:UltiSnipsExpandTrigger = '☺'
"let g:UltiSnipsJumpForwardTrigger = 'è'
"let g:UltiSnipsJumpBackwardTrigger = 'à'
"map è <C-j>
"map à <C-j>
nmap ⦿ cw
imap ⦿ <C-p>
"imap ⦿ <C-l>
"imap ☺ <C-l>
"smap è <C-k>

"smap ⦿ <C-j>

"map à call UltiSnips#JumpForwards()
"
"vmap  <silent> ⦿ ☺context
map <leader>ta <C-]>
nnoremap <leader>. :CtrlPTag<cr>


"ruby motion
"
"forward method
map <leader>u ]m
map <leader>U ]M
" previous method
map <leader>mm [m
"Selectionné la méthode courant ou prev et cleanup les blanklines
map <leader>mx [mvar"mx:%s/\n\{3,}/\r\r/e<CR>
"cleàn up de line
map <leader>ld :%s/end\_s  def/end\r\r  def/e<CR>
map <leader>ls :%s/\n\{3,}/\r\r/e<CR>
map <leader>M [M
" forward and open new
map <leader>i ]Mo<CR>def<TAB>
imap ii <ESC>o

" Uge warnig use noremap and so one
"map t j
"map s k


" VTR tmux runner
map <leader>de :VtrSendLinesToRunner<cr>
map <leader>do :VtrOpenRunner {'orientation': 'h', 'percentage':30}<cr>
map <leader>dk :VtrKillRunner<cr>



" extract methods

"task point:
"- store line to extract into a buffer
"- write psudo plugin into a function on vimrc.
"- reload easly modifications
"old line
function! AskFor(something)
  call inputsave()
  let name = input(a:something . ': ')
  call inputrestore()
  return name
endfunction

"
" TODO this function should take parameters
" and add text type
" TODO need a mark after extraction (for example editing condition)
"
function! TextAfterExtractionBegin(name)
  execute "normal Obegin\<cr>  " . a:name . "\<cr>ensure\<cr>end\<esc>j"
endfunction
function! TextAfterExtractionIf(name)
    execute "normal Oif (condition)\<cr>  " . a:name . "\<cr>end\<esc>j"
endfunction
function! TextAfterExtractionSimple(name)
    execute "normal O" . a:name . ""
endfunction

" write an empty function with marker name
" TODO clean body
function! CreateStandardDef(name)
  execute "normal i\<cr>def\<tab>" . a:name . "\<tab>\<esc>dd"
  " clean emtpy body from snipet and paste register body
  execute "normal! \"bP"
endfunction

"store visual lines on register b
function! CutAndStoreLines()
  execute "normal! gv\"bd"
endfunction
"
function! Step2(name)
  " rename function
  execute "normal :%s/method_extracted1/" . a:name . "\<cr>"
endfunction

"5 action ,  named, extract, replace |move| create_named, paste content
function! ExtractRubyMethod(variation) range
  let name = AskFor('Method name')
  call CutAndStoreLines()
  execute "call TextAfterExtraction" . a:variation . "('" . name . "')"
  " go after method
  normal ]Mo
  call CreateStandardDef(name)
  " reindent
  execute "normal! =G$"
endfunction


vmap <leader>⦿e :call ExtractRubyMethod('Simple')<cr>
vmap <leader>⦿i :call ExtractRubyMethod('If')<cr>
vmap <leader>⦿b :call ExtractRubyMethod('Begin')<cr>

"vmap <leader>⦿e "bdOmethod_extracted1<esc>]Mo<CR>def<tab>method_extracted1<tab><esc>dd"bP:%s/method_extracted1/
"vmap <leader>ii :call ExtractRubyMethod('Simple')<cr>

let g:choosewin_overlay_enable        = 1
let g:choosewin_color_overlay         = { 'cterm': [23, 23]  }
let g:choosewin_color_overlay_current = { 'cterm': [58, 58]  }
map <leader>, :ChooseWin<CR>
map <leader>k a
map <leader>z b

let g:switch_mapping = "-"
map <Backspace> <esc>:echo "use something else Du mormon !"<CR>
inoremap <BS> <esc>:echo "use something else Du mormon !"<CR>
imap <BS> <Nop>
imap € <C-x><C-u>

map <leader>tt <C-]>


let g:ctrlp_extensions = ['tags']
nnoremap <Leader>ff :CtrlPTags<cr>
nnoremap <Leader>fd :execute 'CtrlPTags ' . expand('<cword>')<cr>


