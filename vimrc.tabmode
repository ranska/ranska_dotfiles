" @Author:      Tom Link (mailto:micathom AT gmail com?subject=[vim])
" @License:     GPL (see http://www.gnu.org/licenses/gpl.txt)
" @Revision:    31


if !exists('g:tinykeymap#map#tabs2#map')
    " Map leader for the "tabs" tinykeymap.
    let g:tinykeymap#map#tabs#map = "gé"   "{{{2
endif

augroup TinyKeyMapTabs
    au!
    au TabLeave * let g:tkm_previous_tab = tabpagenr()
augroup END


" Based on Andy Wokulas's tabs mode for tinymode.
call tinykeymap#EnterMap('tabs2', g:tinykeymap#map#tabs#map, {'name': 'tabs mode'})
call tinykeymap#Map('tabs2', 'n', 'tabnew')
call tinykeymap#Map('tabs2', 't', 'norm! gt')
call tinykeymap#Map('tabs2', 'T', 'norm! gT')
call tinykeymap#Map('tabs2', "<Right>", 'norm! gt')
call tinykeymap#Map('tabs2', "<Left>", 'norm! gT')
call tinykeymap#Map('tabs2', "<Up>", 'exec "tabmove" (max([1, tabpagenr() - 1]) - 1)')
call tinykeymap#Map('tabs2', "<Down>", 'exec "tabmove" (max([0, tabpagenr() - 1]) + 1)')
call tinykeymap#Map("tabs2", "^", "tabfirst")
call tinykeymap#Map("tabs2", "$", "tablast")
call tinykeymap#Map("tabs2", "<Home>", "tabfirst")
call tinykeymap#Map("tabs2", "<End>", "tablast")
call tinykeymap#Map("tabs2", "c", "tabclose")
call tinykeymap#Map("tabs2", "<Del>", "tabclose")
call tinykeymap#Map("tabs2", "<BS>", "tabclose")
call tinykeymap#Map("tabs2", "p", "call tinykeymap#tabs#Previous()", {'desc': 'Previous tab'})

if exists('g:loaded_tlib') && g:loaded_tlib > 0
    call tinykeymap#Map("tabs", "s", "tabnew +TScratch!", {'desc': 'Scratch tab', 'exit': 1})
endif

" windows.vim
" @Author:      Tom Link (mailto:micathom AT gmail com?subject=[vim])
" @License:     GPL (see http://www.gnu.org/licenses/gpl.txt)
" @Created:     2012-08-28.
" @Last Change: 2014-04-14.
" @Revision:    47

if !exists('g:tinykeymap#map#windows2#map')
    " Map leader for the "windows" tinykeymap.
    let g:tinykeymap#map#windows2#map = "gé"
    let g:tinykeymap#map#windows#map = "<leader>w"   "{{{2
endif


" Based on Andy Wokulas's windows mode for tinymode.
call tinykeymap#EnterMap("windows", g:tinykeymap#map#windows#map, {
            \ 'name': 'windows mode',
            \ 'message': 'winnr() .": ". bufname("%")'
            \ })
" Resize
call tinykeymap#Map('windows', '>', '<count1>wincmd >', {'desc': 'Increase width'})
call tinykeymap#Map('windows', '<', '<count1>wincmd <', {'desc': 'Decrease width'})
call tinykeymap#Map('windows', '|', 'vertical resize <count>', {'desc': 'Set width'})
call tinykeymap#Map('windows', '+', 'resize +<count1>', {'desc': 'Increase height'})
call tinykeymap#Map('windows', '-', 'resize -<count1>', {'desc': 'Decrease height'})
call tinykeymap#Map('windows', '_', 'resize <count>', {'desc': 'Set height'})
call tinykeymap#Map('windows', '=', 'wincmd =', {'desc': 'Make equally high and wide'})
" Rotation
call tinykeymap#Map('windows', 'r', 'wincmd r', {'desc': 'Rotate window downwards/rightwards'})
call tinykeymap#Map('windows', 'R', 'wincmd R', {'desc': 'Rotate window upwards/leftwards'})
call tinykeymap#Map('windows', 'x', '<count>wincmd x', {'desc': 'Exchange windows'})
" Move
call tinykeymap#Map('windows', 'K', 'wincmd K', {'desc': 'Move current window to the top'})
call tinykeymap#Map('windows', 'J', 'wincmd J', {'desc': 'Move current window to the bottom'})
call tinykeymap#Map('windows', 'H', 'wincmd H', {'desc': 'Move current window to the left'})
call tinykeymap#Map('windows', 'L', 'wincmd L', {'desc': 'Move current window to the right'})
call tinykeymap#Map('windows', 'T', 'wincmd T', {'desc': 'Move current window to a new tab page'})
" Motion
call tinykeymap#Map('windows', 'w', '<count>wincmd w', {'desc': 'Below-right window'})
call tinykeymap#Map('windows', 'W', '<count>wincmd W', {'desc': 'Above-left window'})

call tinykeymap#Map('windows', 'h', '<count>wincmd h', {'desc': 'Window above'})
call tinykeymap#Map('windows', 'j', '<count>wincmd j', {'desc': 'Window below'})
call tinykeymap#Map('windows', 'k', '<count>wincmd k', {'desc': 'Left window'})
call tinykeymap#Map('windows', 'l', '<count>wincmd l', {'desc': 'Right window'})

call tinykeymap#Map('windows', 'k', '<count>wincmd k', {'desc': 'Left window'})
call tinykeymap#Map('windows', 'j', '<count>wincmd j', {'desc': 'Window below'})
call tinykeymap#Map('windows', 'h', '<count>wincmd h', {'desc': 'Window above'})
call tinykeymap#Map('windows', 'l', '<count>wincmd l', {'desc': 'Right window'})

" Strong motion
call tinykeymap#Map('windows', 't', 'wincmd t', {'desc': 'Top-left window'})
call tinykeymap#Map('windows', 'b', 'wincmd b', {'desc': 'Bottom-right window'})
call tinykeymap#Map('windows', 'p', 'wincmd p', {'desc': 'Previous window'})
call tinykeymap#Map('windows', 'P', 'wincmd P', {'desc': 'Preview window'})
" Transformation
call tinykeymap#Map('windows', 'c', 'wincmd c', {'desc': 'Close window'})
call tinykeymap#Map('windows', 'o', 'wincmd o', {'desc': 'Make the only window', 'exit': 1})
call tinykeymap#Map('windows', 's', 'split')
call tinykeymap#Map('windows', 'v', 'vert split')
" Misc
call tinykeymap#Map('windows', "<Up>", 'wincmd W', {'exit': 1})
call tinykeymap#Map('windows', "<Down>", 'wincmd w', {'exit': 1})

